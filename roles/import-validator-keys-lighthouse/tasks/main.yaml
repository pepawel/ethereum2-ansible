---
- name: Install pip, expect
  apt:
    update_cache: yes
    name:
      - python3-pip
      - expect
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install pip, expect
  yum:
    name:
      - python3-pip
      - expect
    state: latest
  when: ansible_distribution == "CentOS"

- name: Checking validator_definition is empty
  command: "cat {{ e2dc_install_path }}/wallets/validators/validator_definitions.yml"
  register: definition_content
  become: yes
  when: exported_config_path is not defined

- name: Remove validator_definition if it is empty
  file:
    path: "{{ e2dc_install_path }}/wallets/validators/validator_definitions.yml"
    state: absent
  become: yes
  when: "{{ definition_content.stdout_lines | length < 3 }}" and exported_config_path is not defined

- name: Remove api-token file if no validators imported
  file:
    path: "{{ e2dc_install_path }}/wallets/validators/api-token.txt"
    state: absent
  become: yes
  when: "{{ definition_content.stdout_lines | length < 3 }}" and exported_config_path is not defined 

- name: Run import
  shell: "./lighthouse_validator_import.sh {{ validator_password | quote }}"
  args:
    chdir: "{{ e2dc_install_path }}"
  register: import_output
  become: yes
  become_user: "{{ stereum_user }}"
  when: setups[setup].create_account is defined

- name: Get keys from launchpad in variable
  find:
    paths: "{{ e2dc_install_path }}/launchpad"
    patterns: "keystore-*.json"
  register: key_files
  become: yes

- name: Create keystore_backup directory
  file:
    path: "{{ e2dc_install_path }}/launchpad/keystore_backup"
    state: directory
  become: yes

- name: Copy keystore files to backup directory
  shell: "cp {{ e2dc_install_path }}/launchpad/keystore-*.json {{ e2dc_install_path }}/launchpad/keystore_backup"
  become: yes  

- name: Removing keys from launchpad
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ key_files.files }}"
  become: yes
  
- name: error incorrect password
  fail:
    msg: "Incorrect Password!!! Please check your validator password and try it again."
  become: yes
  when: "'Invalid password' in import_output.stdout"

- name: error account is already imported
  fail:
    msg: "Choosen account is already imported"
  become: yes
  when: "'Skipping import of keystore for existing public key' in import_output.stdout"

- name: error empty password
  fail:
    msg: "Password is empty!"
  become: yes
  when: import_output.stdout == ""

# EOF

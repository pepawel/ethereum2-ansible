---
- name: Install required system packages
  apt:
    name: "{{ item }}"
    state: latest
    update_cache: yes
  loop:
    - git
    - build-essential
    - gcc
    - wget
    - python3-pip  

- name: Install pexpect
  pip:
    name: pexpect
  become: yes    
  when: validator_number is defined and validator_mnemonic is defined  

- name: Find out home directory
  command: echo $HOME
  register: homedir
  when: validator_number is defined and validator_mnemonic is defined

- name: Checking Go is already installed
  stat: 
    path: "{{ homedir.stdout}}/go"
  register: go_check
  when: validator_number is defined and validator_mnemonic is defined

- name: Remove other version of Go if installed
  ansible.builtin.expect:
    command: "apt-get remove --auto-remove golang-go"
    timeout: 10
    responses:
       'Do you want to continue?': "y"
  when: (go_check.stat.exists and go_check.stat.isdir) and validator_mnemonic is defined

- name: Remove Go directory if exists
  ansible.builtin.file:
    path: "{{ homedir.stdout }}/go"
    state: absent
  when: (go_check.stat.exists and go_check.stat.isdir) and validator_mnemonic is defined

- name: Download and Extract Go binary in '$HOME'
  shell: wget -c https://dl.google.com/go/go1.16.8.linux-amd64.tar.gz -O - | sudo tar -xz -C "{{ homedir.stdout }}"
  args:
    warn: false
  become: yes
  when: validator_number is defined and validator_mnemonic is defined

- name: Add GO PATH in '$HOME/.profile'
  blockinfile:
    path: ~/.profile
    block: |
      if [ -d "{{ homedir.stdout }}/go/bin" ] ; then
        PATH="$PATH:{{ homedir.stdout }}/go/bin"
      fi 
  when: validator_number is defined and validator_mnemonic is defined    

- name: Source .profile
  shell: "{{ item }}"
  with_items:
    - source ~/.profile
  args:
    executable: /bin/bash
  when: validator_number is defined and validator_mnemonic is defined  

- name: Install ethdo
  shell:
    cmd: GO111MODULE=on "{{ homedir.stdout }}/go/bin/go" get github.com/wealdtech/ethdo 
  when: validator_number is defined and validator_mnemonic is defined   

- name: Generate password for wallet and account
  shell: uuidgen
  register: password_gen  
  when: validator_number is defined and validator_mnemonic is defined

- name: create ethdo wallet
  shell: ~/go/bin/ethdo wallet create --type=hd --mnemonic= "{{ validator_mnemonic }}" --wallet="Wallet" --wallet-passphrase="{{password_gen.stdout}}"
  when: validator_number is defined and validator_mnemonic is defined
  
- name: create account(s)
  shell: |
    i=0
    while [[ "$i" < "{{ validator_number }}" ]]
    do
    ~/go/bin/ethdo account create --account="Wallet/Account-$i" --path=m/12381/3600/$i/0/0 --wallet-passphrase="{{password_gen.stdout}}" --passphrase="{{password_gen.stdout}}"
    ((i=i+1))
    done
  args:
    executable: /bin/bash  
  become: yes 
  when: validator_number is defined and validator_mnemonic is defined

- name: Copy wallet into Stereum's wallets directory
  ansible.builtin.copy:
    src: ~/.config/ethereum2/wallets/
    dest: "{{ e2dc_install_path }}/wallets"
    owner: "{{ stereum_user }}"
    group: "{{ stereum_user }}"
    remote_src: yes
  become: yes
  when: validator_number is defined and validator_mnemonic is defined  

- name: Copy wallet into Stereum's wallets directory 'import-config'
  ansible.builtin.copy:
    src: /tmp/exported-config/wallet/
    dest: "{{ e2dc_install_path }}/wallets"
    owner: "{{ stereum_user }}"
    group: "{{ stereum_user }}"
    remote_src: yes
  become: yes  
  when: exported_config_path is defined and exported_config_password is defined

- name: Change wallets' ownership, group and permissions
  ansible.builtin.file:
    path: "{{ e2dc_install_path }}/wallets"
    mode: '0755'
    recurse: yes
  become: yes  

- name: Put the account password into the Dirk passphrases
  ansible.builtin.copy:
    content: '{{password_gen.stdout}}'
    dest: "{{ e2dc_install_path }}/config/dirk/passphrases/account-passphrase.txt"
  become: yes
  become_user: "{{ stereum_user }}"
  when: validator_number is defined and validator_mnemonic is defined

- name: Put the account password into the Dirk passphrases 'import-config'
  ansible.builtin.copy:
    src: /tmp/exported-config/account-passphrase.txt
    dest: "{{ e2dc_install_path }}/config/dirk/passphrases/account-passphrase.txt"
    mode: '0755'
  become: yes  
  when: exported_config_path is defined and exported_config_password is defined

- name: Put the wallet password into the Dirk passphrases
  ansible.builtin.copy:
    content: '{{password_gen.stdout}}'
    dest: "{{ e2dc_install_path }}/config/dirk/passphrases/wallet-passphrase.txt"
  become: yes
  become_user: "{{ stereum_user }}"
  when: validator_number is defined and validator_mnemonic is defined

- name: Put the wallet password into the Dirk passphrases 'import-config'
  ansible.builtin.copy:
    src: /tmp/exported-config/wallet-passphrase.txt
    dest: "{{ e2dc_install_path }}/config/dirk/passphrases/wallet-passphrase.txt"
    mode: '0755'
  become: yes
  when: exported_config_path is defined and exported_config_password is defined  

- name: Put the wallet name into the Vouch
  ansible.builtin.replace:
    path: "{{ e2dc_install_path }}/config/vouch/vouch.yml"
    regexp: '\.\*'
    replace: 'Wallet'
  become: yes
  become_user: "{{ stereum_user }}"

# EOF
